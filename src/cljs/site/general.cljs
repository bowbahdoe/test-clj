;; Utilitities used more than once
(ns site.general)

;; ----------------------------------------------------------------------------
;; |Sequence X| -> |Vector (list N X)|
;; Returns a Vector of the elements of collection paired in a list with their
;; original index in collection
;; Ex.
;; [] -> []
;; '() -> []
;; '(a) -> ['(0 a)]
;; ['a] -> ['(0 a)]
;; '(a b c) -> ['(0 a) '(1 b) '(2 c)]
;; ['a 'b 'c] -> ['(0 a) '(1 b) '(2 c)]

(defn enumerate [collection]
  (loop [col collection
         new-col []
         N 0]
    (if (empty? col)
      new-col
      (recur (rest col) (conj new-col (list N (first col))) (inc N)))))

;; |Sequence |Sequence X|| -> |Lazy-Seq |Sequence X||
;; Returns a realized lazy sequence of the items of collection with
;; the metadata of {:key N} where N is the index of the item in
;; the original list associated with it
;; N.B. The intended use of this is for react lists with unchanging data
(defn give-indexed-keys [collection]
  (for [[index item] (enumerate collection)]
    (with-meta item {:key index})))

;; Oh good god I can actually just make up a number
;; I bet there is a better way to do this....
(defonce base-id (atom 49259547))

;; nil -> N
;; returns a new N that has not been generated by this function before
;; N.B. only gaurentee is that each successive call will return
;; a different N than any previous call to this function
(defn get-unique-id []
  (swap! base-id inc)
  base-id)

;; |Sequence |Sequence X|| -> |Lazy-Seq |Sequence X||
;; Returns a realized lazy sequence of the items of collection with
;; the metadata of {:key N} where N is an N unique from any generated before it
;; N.B. The intended use of this is for react lists where I dunno man
(defn give-unique-keys [collection]
  (map #(with-meta % {:key (get-unique-id)}) collection))
